//! # Benchmark: Member Removal (Receiver Perspective)
//!
//! This benchmark evaluates the performance of an existing group member processing
//! a `Commit` message that removes another member from the group. This represents
//! the "receiver-side" cost for a passive participant who remains in the group.
//!
//! When a member is removed, all other remaining members receive a `Commit`
//! message. They must process this message to update their local group state and
//! stay synchronized. This involves validating the committer's signature, applying
//! the changes to the ratchet tree (i.e., blanking the removed member's leaf),
//! and deriving the new epoch's shared keys.
//!
//! The performance of this operation is critical for the scalability of the
//! protocol, as its cost is borne by every remaining member for each removal.
//!
//! ## Measured Operations
//!
//! The benchmark measures the time taken for the following sequence of operations:
//! - `MlsGroup::process_message(...)`: Parses and validates the incoming `Commit`.
//! - `MlsGroup::merge_staged_commit(...)`: Applies the validated removal to the
//!   local group state, advancing the epoch.

#[macro_use]
extern crate criterion;
extern crate openmls;
extern crate rand;

mod common;

use common::*;
use criterion::{BatchSize, BenchmarkId, Criterion};
use openmls::prelude::*;

/// Defines and executes the benchmark for a member processing another's removal.
///
/// This function configures a `criterion` benchmark group named "5.2. Member Removal (Receiver)".
/// It measures the time required for one member of a group to process a `Commit`
/// generated by another member that removes a third member.
///
/// The setup for each iteration is as follows:
/// 1. A group of `n` members is created, including three key actors: Alice (the remover),
///    Bob (the receiver), and Charlie (the one to be removed).
/// 2. The group states of Alice and Bob are synchronized.
/// 3. Alice creates a `Commit` to remove Charlie.
/// 4. The benchmark then measures the time it takes for Bob to process this `Commit`.
fn benchmark_remove_member_receiver(c: &mut Criterion, fixture: &BenchmarkFixture) {
    let mut group = c.benchmark_group("5.2. Member Removal (Receiver)");
    let ciphersuite = fixture.ciphersuite;

    // SPHINCS+ is significantly slower, so a smaller sample size is used.
    if is_sphincs_ciphersuite(ciphersuite) {
        group.sample_size(50);
    }

    for &size in &get_group_sizes() {
        // This scenario requires at least 3 members: a remover, one to be removed,
        // and a receiver to process the commit.
        if size < 3 {
            continue;
        }

        let benchmark_id = BenchmarkId::new(
            "RemoveMemberReceiver",
            format!(
                "size={:04}, cs={:?}",
                size,
                ciphersuite.signature_algorithm()
            ),
        );

        group.bench_function(benchmark_id, move |b| {
            b.iter_batched(
                || {
                    // SETUP: Create a group, have Alice generate a removal commit,
                    // and give it to Bob to process. This part is not measured.

                    // 1. Create the principal actors.
                    let (alice_credential, alice_signer, _) =
                        create_member(ciphersuite, &fixture.provider, b"alice_remover");
                    let (_, _, bob_key_package) =
                        create_member(ciphersuite, &fixture.provider, b"bob_receiver");
                    let (charlie_credential, _, charlie_key_package) =
                        create_member(ciphersuite, &fixture.provider, b"charlie_removed");

                    // 2. Alice creates a group.
                    let group_config = MlsGroupCreateConfig::builder()
                        .wire_format_policy(PURE_PLAINTEXT_WIRE_FORMAT_POLICY)
                        .ciphersuite(ciphersuite)
                        .build();
                    let mut alice_group = MlsGroup::new(
                        &fixture.provider,
                        &alice_signer,
                        &group_config,
                        alice_credential,
                    )
                    .expect("Error creating group for Alice.");

                    // 3. Alice adds Bob, Charlie, and all other initial members.
                    let mut members_to_add = vec![
                        bob_key_package.key_package().clone(),
                        charlie_key_package.key_package().clone(),
                    ];
                    members_to_add.extend(
                        fixture
                            .member_pool
                            .iter()
                            .take(size - 3) // -3 for Alice, Bob, Charlie
                            .map(|kb| kb.key_package().clone()),
                    );

                    let (_, welcome, _) = alice_group
                        .add_members(&fixture.provider, &alice_signer, &members_to_add)
                        .unwrap();
                    alice_group.merge_pending_commit(&fixture.provider).unwrap();

                    // 4. Bob processes the Welcome to create his synchronized group instance.
                    let welcome_msg: MlsMessageIn = welcome.into();
                    let staged_welcome = StagedWelcome::new_from_welcome(
                        &fixture.provider,
                        group_config.join_config(),
                        welcome_msg.into_welcome().unwrap(),
                        Some(alice_group.export_ratchet_tree().into()),
                    )
                    .unwrap();
                    let bob_group = staged_welcome.into_group(&fixture.provider).unwrap();

                    // 5. Alice finds Charlie's leaf index and creates a commit to remove him.
                    // This is the commit Bob will process.
                    let charlie_leaf_index = alice_group
                        .members()
                        .find(|m| m.credential == charlie_credential.credential)
                        .unwrap()
                        .index;
                    let (commit_for_removal, _, _) = alice_group
                        .remove_members(&fixture.provider, &alice_signer, &[charlie_leaf_index])
                        .unwrap();

                    (bob_group, commit_for_removal)
                },
                |(mut bob_group, commit_for_removal)| {
                    // TIMED: Bob processes the commit that removes Charlie.
                    // This is the operation being benchmarked.
                    let processed = bob_group
                        .process_message(
                            &fixture.provider,
                            commit_for_removal.into_protocol_message().unwrap(),
                        )
                        .expect("Error processing removal commit.");

                    if let ProcessedMessageContent::StagedCommitMessage(staged_commit) =
                        processed.into_content()
                    {
                        // Merge the commit to finalize the state update.
                        bob_group
                            .merge_staged_commit(&fixture.provider, *staged_commit)
                            .expect("Error merging staged commit.");
                    } else {
                        panic!("Expected a StagedCommitMessage");
                    }
                },
                BatchSize::SmallInput,
            );
        });
    }
    group.finish();
}

/// Main entry point for the "Remove Member (Receiver)" benchmark suite.
///
/// This function orchestrates the benchmarking process by iterating through the
/// selected ciphersuites, setting up the necessary fixture for each, and then
/// invoking the benchmark function.
fn bench_remove_member_runner(c: &mut Criterion) {
    for &ciphersuite in &get_ciphersuites_to_test() {
        let fixture = setup_fixture(ciphersuite);
        benchmark_remove_member_receiver(c, &fixture);
    }
}

criterion_group!(benches, bench_remove_member_runner);
criterion_main!(benches);
