//! # Benchmark: Self-Update (Receiver Perspective)
//!
//! This benchmark evaluates the performance of an existing group member processing
//! a `Commit` message that contains another member's self-update. This represents
//! the "receiver-side" cost for a passive participant when another member rotates
//! their keys.
//!
//! When a member performs a self-update, they broadcast a `Commit` to the group.
//! All other members must process this message to update their view of the group
//! state, specifically by incorporating the changes to the updater's leaf node in
//! the ratchet tree and deriving the new epoch's keys.
//!
//! The performance of this operation is crucial for the scalability and efficiency
//! of the group, as its cost is borne by every member (other than the updater)
//! for each self-update operation.
//!
//! ## Measured Operations
//!
//! The benchmark measures the time taken for the following sequence of operations:
//! - `MlsGroup::process_message(...)`: Parses and validates the incoming `Commit`
//!   from the updating member.
//! - `MlsGroup::merge_staged_commit(...)`: Applies the validated changes to the
//!   local group state, advancing the epoch.

#[macro_use]
extern crate criterion;
extern crate openmls;
extern crate rand;

mod common;

use common::*;
use criterion::{BatchSize, BenchmarkId, Criterion};
use openmls::prelude::*;

/// Defines and executes the benchmark for a member processing another's self-update.
///
/// This function configures a `criterion` benchmark group named
/// "4.2. Group Update (Receiver - SelfUpdate)". It measures the time required for
/// one member of a group to process a `Commit` generated by another member's
/// self-update.
///
/// The setup for each iteration is as follows:
/// 1. A group of `n` members is created (e.g., Alice, Bob, and others).
/// 2. The state of this group is effectively duplicated to simulate two synchronized
///    members (Alice's group and Bob's group).
/// 3. One member (Alice) creates a self-update `Commit`.
/// 4. The benchmark then measures the time it takes for the other member (Bob) to
///    process this `Commit`.
fn benchmark_self_update_receiver(c: &mut Criterion, fixture: &BenchmarkFixture) {
    let mut group = c.benchmark_group("4.2. Group Update (Receiver - SelfUpdate)");
    let ciphersuite = fixture.ciphersuite;

    // SPHINCS+ is significantly slower, so a smaller sample size is used.
    if is_sphincs_ciphersuite(ciphersuite) {
        group.sample_size(50);
    }

    for &size in &get_group_sizes() {
        // We need at least two members: one to send the update, one to receive it.
        if size < 2 {
            continue;
        }

        let benchmark_id = BenchmarkId::new(
            "SelfUpdateReceiver",
            format!(
                "size={:04}, cs={:?}",
                size,
                ciphersuite.signature_algorithm()
            ),
        );

        group.bench_function(benchmark_id, move |b| {
            b.iter_batched(
                || {
                    // SETUP: Create two synchronized groups and have one member generate an update.
                    // This part is not measured.

                    // 1. Create the main actors: Alice (updater) and Bob (receiver).
                    let (alice_credential, alice_signer, _) =
                        create_member(ciphersuite, &fixture.provider, b"alice_updater");
                    let (_, _, bob_key_package) =
                        create_member(ciphersuite, &fixture.provider, b"bob_receiver");

                    // 2. Alice creates a group.
                    let group_config = MlsGroupCreateConfig::builder()
                        .wire_format_policy(PURE_PLAINTEXT_WIRE_FORMAT_POLICY)
                        .ciphersuite(ciphersuite)
                        .build();
                    let mut alice_group = MlsGroup::new(
                        &fixture.provider,
                        &alice_signer,
                        &group_config,
                        alice_credential.clone(),
                    )
                    .expect("Error creating group for Alice.");

                    // 3. Alice adds Bob and all other members to the group.
                    let mut members_to_add = vec![bob_key_package.key_package().clone()];
                    members_to_add.extend(
                        fixture
                            .member_pool
                            .iter()
                            .take(size - 2) // -2 for Alice and Bob
                            .map(|kb| kb.key_package().clone()),
                    );

                    let (_, welcome, _) = alice_group
                        .add_members(&fixture.provider, &alice_signer, &members_to_add)
                        .unwrap();
                    alice_group.merge_pending_commit(&fixture.provider).unwrap();

                    // 4. Bob processes the Welcome to create his synchronized group instance.
                    let staged_welcome = StagedWelcome::new_from_welcome(
                        &fixture.provider,
                        group_config.join_config(),
                        welcome.into_welcome().unwrap(),
                        Some(alice_group.export_ratchet_tree().into()),
                    )
                    .unwrap();
                    let bob_group = staged_welcome.into_group(&fixture.provider).unwrap();

                    // 5. Alice creates a self-update commit. This is the message Bob will process.
                    let (commit_message, _, _) = alice_group
                        .self_update(
                            &fixture.provider,
                            &alice_signer,
                            LeafNodeParameters::default(),
                        )
                        .unwrap()
                        .into_contents();

                    (bob_group, commit_message)
                },
                |(mut bob_group, commit_message)| {
                    // TIMED: Bob processes Alice's self-update commit.
                    // This is the operation being benchmarked.
                    let processed = bob_group
                        .process_message(
                            &fixture.provider,
                            commit_message.into_protocol_message().unwrap(),
                        )
                        .expect("Error processing update commit.");

                    if let ProcessedMessageContent::StagedCommitMessage(staged_commit) =
                        processed.into_content()
                    {
                        // Merge the commit to finalize the state update.
                        bob_group
                            .merge_staged_commit(&fixture.provider, *staged_commit)
                            .expect("Error merging staged commit.");
                    } else {
                        panic!("Expected a StagedCommitMessage");
                    }
                },
                BatchSize::SmallInput,
            );
        });
    }
    group.finish();
}

/// Main entry point for the "Self-Update (Receiver)" benchmark suite.
///
/// This function orchestrates the benchmarking process by iterating through the
/// selected ciphersuites, setting up the necessary fixture for each, and then
/// invoking the benchmark function.
fn bench_self_update_runner(c: &mut Criterion) {
    for &ciphersuite in &get_ciphersuites_to_test() {
        let fixture = setup_fixture(ciphersuite);
        benchmark_self_update_receiver(c, &fixture);
    }
}

criterion_group!(benches, bench_self_update_runner);
criterion_main!(benches);
